var documenterSearchIndex = {"docs":
[{"location":"#DuneIstlSolvers.jl","page":"Home","title":"DuneIstlSolvers.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia wrapper for using BCSR matrices, iterative solvers and preconditioners from the ISTL (v2.7.0) (iterative solver template library) module of DUNE (v2.7.0) (the Distributed and Unified Numerics Environment). Documentation of DUNE (v2.7.0) is available here;","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DuneIstlSolvers.jl is unregistered for now. In addition, the dependent JLL package libduneistlsolver_jll.jl is also unregistered.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Therefore, to install, we need to first manually add libduneistlsolver_jll.jl:","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add https://github.com/DeanLym/libduneistlsolver_jll.jl.git","category":"page"},{"location":"","page":"Home","title":"Home","text":"Next, install DuneIstlSolvers.jl with","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add https://github.com/DeanLym/DuneIstlSolver.git","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using DuneIstlSolvers\n## create a solver for 3x3 BCSR matrix with block size 2\nn = 3\nsolver = DuneIstlSolver{Float64, Int32(2)}(n)\nprint_matrix(solver)","category":"page"},{"location":"","page":"Home","title":"Home","text":"## add non-zero blocks to the BCSR matrix\nrow_size = Int32.([1, 1, 1])\nnnz = sum(row_size)\nBI = Int32.([1, 2, 3]) # one-based indexing\nBJ = copy(BI)\nconstruct_matrix(solver, nnz, row_size, BI, BJ)\nprint_matrix(solver)","category":"page"},{"location":"","page":"Home","title":"Home","text":"## Add value to the BCSR matrix\nV1 = [1.0, 2.0, 3.0]\nadd_value_matrix(solver, nnz, BI, BJ, 1, 1, V1)\nadd_value_matrix(solver, nnz, BI, BJ, 2, 2, V1)\nprint_matrix(solver)","category":"page"},{"location":"","page":"Home","title":"Home","text":"## Add value to the RHS vector\nV2 = [2.0, 4.0, 6.0]\nadd_value_rhs(solver, n, BI, 1, V2)\nadd_value_rhs(solver, n, BI, 2, V2)\nprint_rhs(solver)","category":"page"},{"location":"","page":"Home","title":"Home","text":"## Get default settings for the iterative solver\nprintln(\"Solver type: \", get_solver_type(solver))\nprintln(\"Target reduction: \", get_target_reduction(solver))\nprintln(\"Maximum iterations:\", get_max_iter(solver))","category":"page"},{"location":"","page":"Home","title":"Home","text":"## Get default settings for the preconditioner\nprintln(\"Preconditioner type: \", get_preconditioner_type(solver))\nprintln(\"Preconditioner relax: \", get_preconditioner_relax(solver))\nprintln(\"ILU order: \", get_ilu_n(solver))","category":"page"},{"location":"","page":"Home","title":"Home","text":"## Solve the linear equation\nset_verbose(solver, 2)\nsolve(solver)","category":"page"},{"location":"","page":"Home","title":"Home","text":"## Get solution\nx = zeros(Float64, 2*n)\nget_solution(solver, x)\nx","category":"page"},{"location":"","page":"Home","title":"Home","text":"## Get statistics\nprintln(\"Number of iterations: \", get_iterations(solver))\nprintln(\"Solver converged: \", get_converged(solver))\nprintln(\"Final relative reduction: \", get_reduction(solver))\nprintln(\"Time elapsed: \", get_elapsed(solver), \"s\")","category":"page"},{"location":"#Instantiated-matrices,-solvers-and-preconditioners","page":"Home","title":"Instantiated matrices, solvers and preconditioners","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For now, only a few matrices, solvers and preconditioners are supported. More will be added in future releases.","category":"page"},{"location":"#Matrices","page":"Home","title":"Matrices","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"At the time being, BCRS matrices with 1) square block of size 1-4, 2) element type of float and double are supported.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Dune Type Julia Usage\nDune::BCRSMatrix<Dune::FieldMatrix<double,1,1>> DuneIstlSolver{Float64, Int32(1)}\nDune::BCRSMatrix<Dune::FieldMatrix<double,2,2>> DuneIstlSolver{Float64, Int32(2)}\nDune::BCRSMatrix<Dune::FieldMatrix<double,3,3>> DuneIstlSolver{Float64, Int32(3)}\nDune::BCRSMatrix<Dune::FieldMatrix<double,4,4>> DuneIstlSolver{Float64, Int32(4)}\nDune::BCRSMatrix<Dune::FieldMatrix<float,1,1>> DuneIstlSolver{Float32, Int32(1)}\nDune::BCRSMatrix<Dune::FieldMatrix<float,2,2>> DuneIstlSolver{Float32, Int32(2)}\nDune::BCRSMatrix<Dune::FieldMatrix<float,3,3>> DuneIstlSolver{Float32, Int32(3)}\nDune::BCRSMatrix<Dune::FieldMatrix<float,4,4>> DuneIstlSolver{Float32, Int32(4)}","category":"page"},{"location":"#Solvers","page":"Home","title":"Solvers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"At the time being, only the BiCGSTAB and GMRes solvers are supported.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Dune Type Julia Usage\nDune::BiCGSTABSolver set_solver_type(solver, \"BiCGSTAB\")\nDune::RestartedGMResSolver set_solver_type(solver, \"RestartedGMRes\")","category":"page"},{"location":"#Preconditioners","page":"Home","title":"Preconditioners","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"At the time being, only the incomplete LU preconditioner is supported.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Dune Type Julia Usage\nDune::SeqILU set_preconditioner_type(solver, \"ILU\")","category":"page"},{"location":"#Supported-platforms","page":"Home","title":"Supported platforms","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DuneIstlSolvers.jl can be used on platforms that are supported by libduneistlsolver_jll.jl.","category":"page"}]
}
